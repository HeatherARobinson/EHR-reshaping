load ("sir.data.rda")
memory.size(50000)
#READ CONDITION FILES- SUFFIX ALL NAMES WITH A 1 THEN YOU CAN IMPORT THEM ALL TOGETHER

library(zoo)
library(plyr)
library(tidyverse)
library(zoo)
library(data.table)
library(survival)

####################################################


#SELECT PATIENTS WITH CREATININE DATA
sir.data[sir.data$ReadCode=="44J3.",]->crea 

#REMOVE DIALYSIS PATIENTS
dialysis<-sir.data[sir.data$ReadCode %in% Dialysis1.csv$ReadCode,]
crea<-crea[!crea$PatientID %in% dialysis,]


#DATA CLEANING
#REMOVE DUPLICATE AND OUT OF RANGE ENTRIES
as.numeric(as.character(crea$CodeValue)) -> crea$CodeValue
crea$Creatinine<-ifelse(crea$ReadCode=="44J3.",as.numeric(crea$CodeValue),NA) #Any non numeric values are marked NA
(as.numeric(year(strptime(crea$EntryDate, format="%Y%m%d")))) -> year
(as.numeric(month(strptime(crea$EntryDate, format="%Y%m%d")))) -> month
(as.numeric(day(strptime(crea$EntryDate, format="%Y%m%d")))) -> day
Over$EntryPeriod<-paste(month,year)
#Delete duplicate test results
library(lubridate)
d<-crea[(duplicated(crea$Creatinine)&duplicated(crea$PatientID)&duplicated(crea$EntryPeriod)),]
crea[-d,] -> crea 
crea[-which(crea$CodeValue<18),] -> crea # creatinine values less than 18 considered not valid
crea$Creatinine<-crea$CodeValue

#SELECT DATA POST 2008
crea<-crea[as.numeric(year(strptime(crea$EntryDate, format="%Y%m%d")))>=2008,]

#ASSIGN AGE
crea$Age<-(as.numeric(year(strptime(crea$EntryDate, format="%Y%m%d"))))-crea$BirthYear
crea<-na.omit(crea)

#Create a date format entry date
(as.numeric(year(strptime(crea$EntryDate, format="%Y%m%d")))) -> year
(as.numeric(month(strptime(crea$EntryDate, format="%Y%m%d")))) -> month
(as.numeric(day(strptime(crea$EntryDate, format="%Y%m%d")))) -> day
as.Date.character(paste(year,month,day,sep="-")) -> crea$event.date

#LIMIT TO PATIENTS WITH AT LEAST 1 POST 2008 CREATININE TEST VALUES
crea$EntryDate <- as.Date(as.character(crea$EntryDate, "%Y%m%d"))
post2008<-crea[as.numeric(year(strptime(crea$EntryDate, format="%Y%m%d")))>=2008,]
table(post2008$PatientID) < 1 -> rare  
rownames(as.matrix(rare)) -> ids
table(rare)
crea[!(crea$PatientID %in% ids[rare]),] -> crea.rep	

#CHECK PATIENTS WHICH HAVE A SPECIFIC RECORDED TIME RANGE IN YEARS AND AT LEAST 2 TESTS
aggregate(as.numeric(year(strptime(crea.rep$event.date, format="%Y-%m-%d"))), list(crea.rep$PatientID), range) -> ranges
ranges$x[,2] - ranges$x[,1] -> ranges$range
ranges[(which(ranges$range<1)),1] -> range_short_ids    # define exclusion range
crea.rep[-which(crea.rep$PatientID %in% range_short_ids),]->crea.rep 
df1<-crea.rep[ crea.rep$PatientID %in%  names(table(crea.rep2$PatientID))[table(crea.rep2$PatientID)==2] , ] # define min tests
levels(unique(as.factor(df1$PatientID)))

######################################################
#Add demographic variables from lookup tables

#CODE IMD
IMD.data<-read.table("IMD20101.csv",header=TRUE,sep=",")
crea.rep<-merge(crea.rep,IMD.data,by="LSOA",all.x=TRUE, all.y=FALSE)

#CODE ETHNICITY
ethnic.data<-read.table("ethnic.data.csv",header=TRUE,sep=",")
ethnic.data$Category<-floor(ethnic.data$Category)
crea.rep<-merge(crea.rep,ethnic.data,by.x="Ethnicity",by.y="ClinCode2",all.x=TRUE, all.y=FALSE)
names(crea.rep)
crea.rep<-subset(crea.rep, select=-c(Ethnicity,ClinCode1,ReligionDescription,MaritalStatus))
colnames(crea.rep)[which(names(crea.rep) == "Category")] <- "Ethnicity"

#######################################################
#Breakpoint
#######################################################
#######################################################
save(crea.rep, file = "crea.rephr.Rdata")
#######################################################

#ADD IN VARIOUS CONDITIONS AND FLAGS FROM MAIN EHR FILES

#load("crea.rephr.Rdata")
sir.data<-sir.data[which(sir.data$PatientID %in% crea.rep$PatientID),]

#Narrow lookup table to the full list of codes of interest to speed up processing

temp = list.files(pattern="*1.csv")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
allcodes<-cbind(temp,all.x=true)

sir.data<-sir.data[which(sir.data$PatientID %in% crea.rep$PatientID & sir.data$ReadCode in allcodes$ReadCode),]

#######################################################
#####OPTIONAL BREAKPOINT
save(sir.data, file = "new.Rdata")
#######################################################

#load("new.Rdata")
#SELECT PATIENTS WHO WERE 18 OR ABOVE AT THE TIME OF HEART FAILURE DIAGNOSIS

########################################################
crea.rep$DataSource<-1
########################################################

#CODE CONDITIONS REQUIRING VALUES TO BE ADDED, NEAREST IF WITHIN X TIME PERIOD
#################################################################
#I HAVE NOT LOOPED THIS YET AS THE CONDITIONS HAVE DIFFERENT REQUIREMENTS

#SERUM SODIUM #1 MONTH
data2<-sir.data[sir.data$ReadCode %in% SerumSodium1.csv$ReadCode,]
indx1 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate)
indx2 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate, 
                   best="prior")
indx3<-ifelse(is.na(indx1), indx2, # find closest date match in data2 for each id and date in data1
       ifelse(is.na(indx2), indx1, 
       ifelse(abs(data2$EntryDate[indx2]- crea.rep$EntryDate) <
              abs(data2$EntryDate[indx1]- crea.rep$EntryDate), indx2, indx1)))


crea.rep$SerumSodium<-data2[indx3, "CodeValue"]
crea.rep$SerSodDateFlag<- ifelse(abs(crea.rep$EntryDate - data2$EntryDate[indx3]) >30, 1, NA)
rm(data2)

###################################################################
#BMI #1 YEAR
data2<-sir.data[sir.data$ReadCode %in% BMI1.csv$ReadCode,]
indx1 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate)
indx2 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate, 
                   best="prior")
indx3<-ifelse(is.na(indx1), indx2, # find closest date match in data2 for each id and date in data1
       ifelse(is.na(indx2), indx1, 
       ifelse(abs(data2$EntryDate[indx2]- crea.rep$EntryDate) <
              abs(data2$EntryDate[indx1]- crea.rep$EntryDate), indx2, indx1)))


crea.rep$BMI<-data2[indx3, "CodeValue"]
crea.rep$BMIDateFlag<- ifelse(abs(crea.rep$EntryDate - data2$EntryDate[indx3]) >365), 1, NA)
rm(data2)rea.rep$EntryDate - data2$EntryDate[indx3])

###################################################################
#BLOOD UREA NITROGEN #1 MONTH
data2<-sir.data[sir.data$ReadCode %in% BloodUreaNitrogen1.csv$ReadCode,]
indx1 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate)
indx2 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate, 
                   best="prior")
indx3<-ifelse(is.na(indx1), indx2, # find closest date match in data2 for each id and date in data1
       ifelse(is.na(indx2), indx1, 
       ifelse(abs(data2$EntryDate[indx2]- crea.rep$EntryDate) <
              abs(data2$EntryDate[indx1]- crea.rep$EntryDate), indx2, indx1)))


crea.rep$BloodUreaNitrogen<-data2[indx3, "CodeValue"]
crea.rep$BUNDateFlag<- ifelse(abs(crea.rep$EntryDate - data2$EntryDate[indx3]) >30, 1, NA)
rm(data2)

##############################################################
#SERUM  #1 MONTH
data2<-sir.data[sir.data$ReadCode %in% SerumPotassium1.csv$ReadCode,]
indx1 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate)
indx2 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate, 
                   best="prior")
indx3<-ifelse(is.na(indx1), indx2, # find closest date match in data2 for each id and date in data1
       ifelse(is.na(indx2), indx1, 
       ifelse(abs(data2$EntryDate[indx2]- crea.rep$EntryDate) <
              abs(data2$EntryDate[indx1]- crea.rep$EntryDate), indx2, indx1)))


crea.rep$SerumPotassium<-data2[indx3, "CodeValue"]
crea.rep$SerPotDateFlag<- ifelse(abs(crea.rep$EntryDate - data2$EntryDate[indx3]) >30, 1, NA)
rm(data2)

##############################################################
#HEART RATE #1 MONTH?
data2<-sir.data[sir.data$ReadCode %in% HeartRate1.csv$ReadCode,]
indx1 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate)
indx2 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate, 
                   best="prior")
indx3<-ifelse(is.na(indx1), indx2, # find closest date match in data2 for each id and date in data1
       ifelse(is.na(indx2), indx1, 
       ifelse(abs(data2$EntryDate[indx2]- crea.rep$EntryDate) <
              abs(data2$EntryDate[indx1]- crea.rep$EntryDate), indx2, indx1)))


crea.rep$HeartRate<-data2[indx3, "CodeValue"]
crea.rep$HeartRateDateFlag<- ifelse(abs(crea.rep$EntryDate - data2$EntryDate[indx3]) >30, 1, NA)
rm(data2)

##############################################################
#SYSTOLIC BP #30 DAYS
data2<-sir.data[sir.data$ReadCode %in% Systolicbloodpressure1.csv$ReadCode,]
indx1 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate)
indx2 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate, 
                   best="prior")
indx3<-ifelse(is.na(indx1), indx2, # find closest date match in data2 for each id and date in data1
       ifelse(is.na(indx2), indx1, 
       ifelse(abs(data2$EntryDate[indx2]- crea.rep$EntryDate) <
              abs(data2$EntryDate[indx1]- crea.rep$EntryDate), indx2, indx1)))


crea.rep$SystolicBP<-data2[indx3, "CodeValue"]
crea.rep$SystBPDateFlag<- ifelse(abs(crea.rep$EntryDate - data2$EntryDate[indx3]) >30, 1, NA)
rm(data2)

##############################################################
#DIASTOLIC BP #30 DAYS
data2<-sir.data[sir.data$ReadCode %in% DiastolicBloodPressure1.csv$ReadCode,]
indx1 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate)
indx2 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate, 
                   best="prior")
indx3<-ifelse(is.na(indx1), indx2, # find closest date match in data2 for each id and date in data1
       ifelse(is.na(indx2), indx1, 
       ifelse(abs(data2$EntryDate[indx2]- crea.rep$EntryDate) <
              abs(data2$EntryDate[indx1]- crea.rep$EntryDate), indx2, indx1)))


crea.rep$DiastolicBP<-data2[indx3, "CodeValue"]
crea.rep$DiastBPDateFlag<- ifelse(abs(crea.rep$EntryDate - data2$EntryDate[indx3]) >30, 1, NA)
rm(data2)
save(crea.rep, file = "new2.Rdata")

##############################################################
#SERUM ALBUMIN #1 YEAR
data2<-sir.data[sir.data$ReadCode %in% SerumAlbumin1.csv$ReadCode,]
indx1 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate)
indx2 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate, 
                   best="prior")
indx3<-ifelse(is.na(indx1), indx2, # find closest date match in data2 for each id and date in data1
       ifelse(is.na(indx2), indx1, 
       ifelse(abs(data2$EntryDate[indx2]- crea.rep$EntryDate) <
              abs(data2$EntryDate[indx1]- crea.rep$EntryDate), indx2, indx1)))

crea.rep$SerumAlbumin<-data2[indx3, "CodeValue"]
crea.rep$AlbuminDateFlag<- ifelse(abs(crea.rep$EntryDate - data2$EntryDate[indx3]) >365, 1, NA)
rm(data2)
save(crea.rep, file = "new2.Rdata")

###################################################################
#URINE ALBUMIN #1 YEAR
data2<-sir.data[sir.data$ReadCode %in% UrineAlbumin1.csv$ReadCode,]
indx1 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate)
indx2 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate, 
                   best="prior")
indx3<-ifelse(is.na(indx1), indx2, # find closest date match in data2 for each id and date in data1
       ifelse(is.na(indx2), indx1, 
       ifelse(abs(data2$EntryDate[indx2]- crea.rep$EntryDate) <
              abs(data2$EntryDate[indx1]- crea.rep$EntryDate), indx2, indx1)))

crea.rep$UrineAlbumin<-data2[indx3, "CodeValue"]
crea.rep$UrineAlbuminDateFlag<- ifelse(abs(crea.rep$EntryDate - data2$EntryDate[indx3]) >365, 1, NA)
rm(data2)
save(crea.rep, file = "new2.Rdata")

###################################################################
#MEAN CORPUSCULAR VOLUME #120 DAYS
data2<-sir.data[sir.data$ReadCode %in% MCV1.csv$ReadCode,]
indx1 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate)
indx2 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate, 
                   best="prior")
indx3<-ifelse(is.na(indx1), indx2, # find closest date match in data2 for each id and date in data1
       ifelse(is.na(indx2), indx1, 
       ifelse(abs(data2$EntryDate[indx2]- crea.rep$EntryDate) <
              abs(data2$EntryDate[indx1]- crea.rep$EntryDate), indx2, indx1)))


crea.rep$BMeanCorpVolume<-data2[indx3, "CodeValue"]
crea.rep$MCVDateFlag<- ifelse(abs(crea.rep$EntryDate - data2$EntryDate[indx3]) >120, 1, NA)
rm(data2)

###################################################################
#HAEMOGLOBIN #120 DAYS
data2<-sir.data[sir.data$ReadCode %in% Haemoglobin1.csv$ReadCode,]
indx1 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate)
indx2 <- neardate(crea.rep$PatientID, data2$PatientID, crea.rep$EntryDate, data2$EntryDate, 
                   best="prior")
indx3<-ifelse(is.na(indx1), indx2, # find closest date match in data2 for each id and date in data1
       ifelse(is.na(indx2), indx1, 
       ifelse(abs(data2$EntryDate[indx2]- crea.rep$EntryDate) <
              abs(data2$EntryDate[indx1]- crea.rep$EntryDate), indx2, indx1)))


crea.rep$Haemoglobin<-data2[indx3, "CodeValue"]
crea.rep$HbDateFlag<- ifelse(abs(crea.rep$EntryDate - data2$EntryDate[indx3]) >120, 1, NA)
rm(data2)

#CODE BINARY CONDITIONS BASED ON COMMENCEMENT DATE ONWARDS

########################################################

#Generate vector for whether test after diagnosis
##########################################################################
#CODE FOR POTENTIAL LOOP (NEEDS WORK)
#for (i in 1:length(temp)){
#col_names<-""
#eval(parse(text = paste0('sir.data2$colum', i, '<- with(sir.data2,
#ifelse(sir.data2$ReadCode %in% (temp[[i]][,2]),paste(sir.data2$EntryDate), NA)
#)')))
#}
############################################################################

#NEPHRECTOMY

P2$endpoint1<-with(P2,ifelse(P2$ReadCode  %in%  Nephrectomy1.csv$ReadCode,paste(P2$EntryDate), NA)) 
P2$endpoint1<-as.Date(P2$endpoint1, format="%Y%m%d")
smalltab<-P2[!is.na(P2$endpoint1),]
smalltab<-smalltab[,c("PatientID","endpoint1")]
first<-smalltab %>% group_by(PatientID) %>%
  summarize(endpoint1 = min(endpoint1))


##########################################################

##########################################################
#FORMULA VARIABLES

crea.rep$log_CREA <- log10(crea.rep$Creatinine)


############################################
PRESCRIBING DATA
###########################################
#PREP TAB DELIMITED FILES FOR PERL
#https://github.com/rw251/research-events-medication-htn/blob/master/resources/example-data2.txt
head(P2[P2$ReadCode=="b311.",])


CHECK FOR SENSITIITY OF SPECULATIVE HEART FAILURE CODES
###################################################################
#HEART FAILURE ALL CODES ANY HF AT ANY POINT
data2<-sir.data[sir.data$ReadCode %in% HeartFailureAll1.csv$Code,]
crea.rep$HeartFailureAll<-ifelse(crea.rep$PatientID  %in%  data2$PatientID,1,0)
rm(data2)
###################################################################
#HEART FAILURE CONFIRMED CODES ANY HF AT ANY POINT
data2<-sir.data[sir.data$ReadCode %in% HeartFailureConfirmed1.csv$ReadCode,]
crea.rep$HeartFailureConf<-ifelse(crea.rep$PatientID  %in%  data2$PatientID,1,0) 
rm(data2)
specheartpatients<-crea.rep[crea.rep$HeartFailureConf==0&crea.rep$HeartFailureAll==1,]
levels(as.factor(specheartpatients$PatientID))
table(crea.rep$HeartFailureAll)
#CODE BINARY CONDITIONS BASED ON COMMENCEMENT DATE ONWARDS

########################################################
