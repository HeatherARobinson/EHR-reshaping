inst<-read.csv("productedited803.csv")
subs<-CPRD[CPRD$prodcode %in% inst$CODE1,]
dos<-read.table("common_dosages.txt",header=TRUE)
inst<-inst[,c(1,4:8)]
names(inst)[1]<-"prodcode"
subs<-merge(subs,inst,all.x=TRUE)
subs<-merge(subs,dos,all.x=TRUE)
subs <- unique(subs)

#the cprd term daily_dose calls the number of tablets taken per day. You therefore need to multiply this by dose
subs$DAILY_DOSE<-subs$daily_dose*subs$DOSE_PER_TAB
################################################################################################################ checked

#FILL IN MISSING DATA IF POSSIBLE
#FIND THE MEDIAN DOSE FOR EACH DRUG AND USE THIS IF MISSING
b<-subs[,c("DAILY_DOSE","TYPE")]
b<-na.omit(b)
b2<-b %>% 
group_by(TYPE) %>% 
summarise_(~ median(DAILY_DOSE)) 
b2<-as.data.frame(b2)

subs<-merge(subs,b2,all.x=TRUE)
names(subs)[31]<-"MED_DOSE"
subs$DAILY_DOSE<-ifelse(is.na(subs$DAILY_DOSE),subs$MED_DOSE,subs$DAILY_DOSE)

#A zero often means "take as directed"- we will assume median here

subs$DAILY_DOSE<-ifelse(subs$DAILY_DOSE==0,subs$MED_DOSE,subs$DAILY_DOSE)
save(subs,file="subs.rda")
############################################################################

#IN CPRD DAILY DOSES FOR VARIABLE DOSES CAN BE ASSUMED TO BE THE MINIMUM (0), MAXIMUM (1) OR MEAN (2) OF THE RANGE.
table(subs$dose_max_average[subs$choice_of_dose==1])
#IN 99.95% of cases with a choice a mean has been taken (dose_max_average==2)

############################################################################
#TEXT NOT MINED FOR PROGRESSIVE DOSAGE CHANGES
############################################################################

#ASSIGN DATE OF END OF PRESCRIPTION

subs$m<-ifelse(!is.na(subs$dose_duration)&!subs$dose_duration==0,subs$eventdate+subs$dose_duration,NA)
subs$m<-ifelse(is.na(subs$m),subs$eventdate+(subs$qty/subs$daily_dose),subs$m)
subs$END_DATE<-as.Date(subs$m,origin="1970-01-01")


subs$m<-ifelse(is.na(subs$m),
subs$eventdate+as.difftime(as.numeric(subs$qty),unit="days"),
subs$m)
#ASSUME 1 TABLET USED PER DAY IF DATA MISSING

meddata$END_DATE<-ifelse(!is.na(meddata$END_DATE),meddata$eventdate+as.difftime(m, unit="days"),NA)
meddata$END_DATE<-as.Date(meddata$END_DATE,origin="1970-01-01")
head(meddata)
save(meddata,file="PERMITmeddata28.rda")

################################################################################### 
#STOP INSTRUCTIONS- THOSE WITH STOP INSTRUCTIONS FOR OTHER DRUGS HAVE ENTRIES IN THE ALT_OTHER_MEDS COLUMN

load("PERMITmeddata28.rda")
meddata<-unique(meddata)
meddata$REP<-ifelse(meddata$REP=="Same",paste(meddata$TYPE),paste(meddata$REP))
meddata$REP<-as.factor(meddata$REP)
head(meddata$REP2[!meddata$REP2 %in% meddata$REP])#ALL THOSE IN REP2 ARE ALSO IN REP
r<-paste(unique(meddata$REP))
meddata$REP<-ifelse(meddata$REP %in% r & !is.na(meddata$REP),paste(meddata$REP),NA)
meddata$REP2<-ifelse(meddata$REP2 %in% r& !is.na(meddata$REP2),paste(meddata$REP2),NA) #WE ARE NOT CONCERNED WITH STOP CODES FOR DRUGS NOT OF INTEREST TO US
table(meddata$REP)
table(meddata$REP2)#SOME STOPS REFERRING TO MORE THAN ONE MEDICATION
meddata$ALT_OTHER_MEDS<-ifelse(is.na(meddata$REP),NA,meddata$ALT_OTHER_MEDS)

###################################################################################

#NEAREST DATE MATCH TO THE LAST PRIOR ENTRY OF THE DRUG BEING STOPPED
coda<-meddata[!is.na(meddata$REP),]
stops<-meddata[meddata$TYPE %in% meddata$REP,c("PatientID","EntryDate","END_DATE","TYPE")]
columns=names(stops[c(1,2,4)])
dots<-lapply(columns, as.symbol)
first <-stops %>% 
group_by_(.dots=dots) %>%
as.data.frame 
library(survival)

first$NEWENDDATE<-NA
for (i in 1:length(unique(first$TYPE))){
codab<-coda[coda$REP==first$TYPE[i],]
indx<-neardate(first$PatientID, codab$PatientID, first$EntryDate,codab$EntryDate,best="after")
first$NEWENDDATE<-(ifelse(first$TYPE==first$TYPE[i],codab[indx,"EntryDate"],first$NEWENDDATE))
}
first$NEWENDDATE<-as.Date(first$NEWENDDATE,origin="1970-01-01")
head(first[!is.na(first$NEWENDDATE),])

first<-first[!is.na(first$NEWENDDATE)&first$NEWENDDATE>first$EntryDate&first$NEWENDDATE<first$END_DATE,c("PatientID","EntryDate","END_DATE","TYPE","NEWENDDATE")]
length(first$PatientID)#50 prescriptions are affected
meddata<-merge(meddata,first,all.x=TRUE)
meddata$END_DATE<-ifelse(!is.na(meddata$NEWENDDATE)&meddata$END_DATE>meddata$NEWENDDATE&meddata$EntryDate<meddata$NEWENDDATE,meddata$NEWENDDATE,meddata$END_DATE)
meddata$END_DATE<-as.Date(meddata$END_DATE,origin="1970-01-01")
save(meddata,file="PERMITmeddata28.rda")

#################################################################################
#DEAL WITH 'EXTRAS'
ex<-meddata[meddata$EXTRA==1,]
subx<-meddata[meddata$EXTRA==0,]
ex<-ex[ex$TYPE %in% subx$TYPE & ex$PatientID %in% subx$PatientID & ex$EntryDate>=subx$EntryDate & ex$END_DATE<subx$END_DATE,]
ex[!is.na(ex$TYPE),] #2 specific entries are impacted
#head(subx)
#smalltab<-ex[,c("PatientID","TYPE","EntryDate","END_DATE","DAILY_DOSE")]
#columns=names(smalltab[c(1:3)])
#dots<-lapply(columns, as.symbol)
#firstU <-smalltab %>% 
#group_by_(.dots=dots) %>%
#as.data.frame

#firstU$AddDate<-NA
#firstU$AddDose<-NA
#for (i in 1:unique(as.factor(firstU$TYPE))){
#exb<-ex[ex$TYPE==firstU$TYPE[i],]
#indx<-neardate(firstU$PatientID, subx$PatientID, firstU$EntryDate,subx$EntryDate,best="after")
#firstU$AddDate<-(ifelse(firstU$TYPE==firstU$TYPE[i],subx[indx,"EntryDate"],firstU$AddDate))
#firstU$AddDose<-(ifelse(firstU$TYPE==firstU$TYPE[i],subx[indx,"DAILY_DOSE"],firstU$AddDose))
#}
#firstU$AddDate<-as.Date(firstU$AddDate,origin="1970-01-01")
#head(firstU[!is.na(firstU$AddDate),])
#firstU<-firstU[!is.na(firstU$AddDate)&firstU$AddDate>=firstU$EntryDate&firstU$AddDate<firstU$END_DATE,c("PatientID","EntryDate","END_DATE","TYPE","AddDate","AddDose")]
#length(firstU$PatientID)#1252 prescriptions are affected
#names(firstU)

##################################################################### ONGOING

#RW's main PERL implemented algorithm requires a tab separated input file containing the following fields (names can differ):
#Patient id
#Drug type
#Date
#Tablets (number of tablets prescribed)
#Tablets per day
#Dose (mg)
#Drug family

#CONVERT VOLUME DOSAGES FOR LIQUID MEDS. OMIT WATER TO AVOID PICKING UP SOLID DOSE MEDS INSTRUCTED TO BE DISSOLVED IN WATER.
meddata$CodeValue<-ifelse(grepl("ml",meddata$DESCRIPTION)&!grepl("water",meddata$DESCRIPTION),as.numeric(meddata$CodeValue)/5,as.numeric(meddata$CodeValue))
save(meddata,file="PERMITmeddata28.rda")
write.table(meddata,file="perl_inputd2201.txt",row.names=FALSE,sep="\t")

#WRITE PERL INPUT TABLE WHICH OVERLAPS CONTINUOUS PRESCRIPTIONS (IF YOU NEED TO DO THIS TO DETERMINE A START AND END DATE)
#IN THIS CASE WE ARE JUST MATCHING BACK TO THE NEAREST PRIOR PRESCRIPTION DATE.

#PROCESS THE OUTPUT TABLE FROM THE PERL PROCESSES USING THE ADDITIONAL GITHUB SCRIPT 'PERMIT adding prescription data'
