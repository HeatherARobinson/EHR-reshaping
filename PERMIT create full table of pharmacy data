#MAKE A LARGE TABLE TO PARSE THROUGH RESEARCH MEDICATION EVENTS PERL SCRIPT

load("sir.datahfonly.Rdata")
load("crea.rep221117.rda")
inst<-read.csv("inst051217.csv")
codes1<-read.csv("reads.csv")
codes2<-read.csv("emis.csv")

library(stringr)
library(lubridate)
library(dplyr)
sir.data<-sir.data[sir.data$EntryDate>=20070101&sir.data$EntryDate<=20170901,]
sir.data<-sir.data[sir.data$ReadCode %in% codes1$CODE|sir.data$ReadCode %in% codes2$CODE & sir.data$PatientID %in% crea.rep$PatientID,]
sir.data$EntryDate<-as.Date(as.character(sir.data$EntryDate),format="%Y%m%d")
#inst$DESCRIPTION<-gsub('[[:punct:]]','',inst$DESCRIPTION) #REMOVE PUNCTUATION
#sir.data$CodeUnits<-gsub('[[:punct:]]','',sir.data$CodeUnits) #REMOVE PUNCTUATION

inst$DESCRIPTION<-tolower(inst$DESCRIPTION)#LOWER CASE
sir.data$CodeUnits<-tolower(sir.data$CodeUnits)

#SELECT MEDS DATA ONLY
sub<-sir.data[,c("PatientID","ReadCode","CodeValue","CodeUnits","EntryDate"),]

#REMOVE RESIDUAL DUPLICATES
sub <- unique(sub)
colnames(sub)[colnames(sub) == 'CodeUnits'] <- 'DESCRIPTION'
crea.rep <- unique(crea.rep)

#REPLACE WRITTEN NUMBERS WITH NUMBERS 1-6 IN PATIENT DATA (This step already taken in instruction data lookup)

sub$DESCRIPTION<-gsub("one", "1", sub$DESCRIPTION) 
sub$DESCRIPTION<-gsub("two", "2", sub$DESCRIPTION) 
sub$DESCRIPTION<-gsub("three", "3", sub$DESCRIPTION) 
sub$DESCRIPTION<-gsub("four", "4", sub$DESCRIPTION) 
sub$DESCRIPTION<-gsub("five", "5", sub$DESCRIPTION) 
sub$DESCRIPTION<-gsub("six", "6", sub$DESCRIPTION) 

sub$DESCRIPTION<-gsub(" ", "", sub$DESCRIPTION, fixed = TRUE)  #REMOVE SPACES FROM INSTRUCTION STRINGS (This step already taken in instruction data lookup)
inst<-inst[!duplicated(inst$DESCRIPTION),] #MAKE SURE NO DUPLICATE LINES IN THE LOOKUP TABLE THAT CAN LEAD TO NAs IN THE FINAL TABLE
#############################################################################################################CHECKED
#JOIN THE INSTRUCTIONS ONTO THE MAIN FILE

sub$DESCRIPTION<-gsub("#", "", sub$DESCRIPTION) 
sub$DESCRIPTION<-gsub(",", "", sub$DESCRIPTION) 
sub$DESCRIPTION<-gsub(":", "", sub$DESCRIPTION) 
sub$DESCRIPTION<-gsub("[.]", "", sub$DESCRIPTION) 
library(stringr)
sub$DESCRIPTION<-str_replace(sub$DESCRIPTION, "(ip.*)", "")
sub$DESCRIPTION<-gsub("[(]", "", sub$DESCRIPTION) 
sub$DESCRIPTION<-gsub("[)]", "", sub$DESCRIPTION) 
inst$DESCRIPTION<-gsub("[)]", "", inst$DESCRIPTION) 
inst$DESCRIPTION<-gsub("[(]", "", inst$DESCRIPTION) 

head(sub$DESCRIPTION[!sub$DESCRIPTION %in% inst$DESCRIPTION])
##################################################################################CHECKED

#MARK PRESCRIPTIONS WHICH ARE INTENDED TO BE EXTRA TABLETS TO ADD TO AN EXISTING DOSE OF THE SAME DRUG.
EX<-sub$DESCRIPTION[grep("extra",sub$DESCRIPTION)]
AD<-sub$DESCRIPTION[grep("addition",sub$DESCRIPTION)]
sub$EXTRA<-ifelse(sub$DESCRIPTION %in% AD | sub$DESCRIPTION %in% EX,1,0)

############################################################################# CHECKED

sub<-merge(sub,inst,all.x=TRUE)
head(sub)
unique(subs$TYPE)#There are 79 different drugs
length(sub$DESCRIPTION[sub$DESCRIPTION==""])
length(sub$DESCRIPTION)
#356/1093512*100
#0.03% of prescription guidance is missing
summary(sub)# THERE ARE BOTH PROGRESSIVE DOSES AND REPLACEMENT PRESCRIPTIONS IN THE DATASET
colnames(sub)[colnames(sub) == 'ReadCode'] <- 'CODE'#RENAME FOR LATER MERGING
#########################################################################CHECKED
#JOIN ON THE DOSAGE DATA
sub2<-merge(sub[sub$CODE %in% codes1$CODE & !sub$CODE %in% codes2$CODE,],codes1,all.x=TRUE) #Add ReadCode dosage information
sub3<-merge(sub[sub$CODE %in% codes2$CODE,],codes2,all.x=TRUE) #Add EMIS/OXMIS dosage information
subs<-rbind(sub2,sub3)

########################################################################### CHECKED
#CALCULATE MISSING DATA WHERE POSSIBLE

levels(as.factor(sub3$DESCRIPTION)) #WHERE OXMIS/ EMIS ARE USED THE DOSAGES ARE IN 'DOSE, and there are no prescription instructions.
subs$DAILY_DOSE<-as.numeric(subs$DAILY_DOSE)
subs$DAILY_DOSE<-ifelse(is.na(subs$DAILY_DOSE)&!is.na(subs$TABLETS_PER_DAY),subs$TABLETS_PER_DAY*subs$DOSE_PER_TAB,subs$DAILY_DOSE)
subs$TABLETS_PER_DAY<-as.numeric(subs$TABLETS_PER_DAY)
subs$TABLETS_PER_DAY<-ifelse(is.na(subs$TABLETS_PER_DAY)&!is.na(subs$DAILY_DOSE)&!is.na(subs$DOSE_PER_TAB),subs$DAILY_DOSE/subs$DOSE_PER_TAB,subs$TABLETS_PER_DAY)
summary(subs$EntryDate[is.na(subs$DAILY_DOSE)]) #All dose information is complete after 2013 but not before.

############################################################################CHECKED
#DIVIDE INTO MULTIPLE ROWS IF THE DOSE CHANGES OVER TIME
#THIS CODE OVERWRITES SO BE CAREFUL TO GO BACK TO THE INITIAL CONSTRUCTION OF SUBS IF YOU WANT TO RUN IT AGAIN TO AVOID REPETITIVELY CREATING NEW ROWS.
#THEN should contain the number of dose changes (i.e. the number of extra rows you need, so most rows should equal zero.)

#DEFINE WHO BELONGS 1N THE LIBARY
library(splitstackshape)
subs$THEN<-ifelse(is.na(subs$THEN),0,subs$THEN)
subs$THEN<-as.numeric(subs$THEN)
expandRows(subs, "THEN") #Create a copied row for each changing dosage
subs$DAILY_DOSE<-ifelse(subs$THEN>0 & (duplicated(subs$PatientID)&duplicated(subs$EntryDate)&duplicated(subs$TYPE)),subs$DOSE2,subs$DAILY_DOSE)
subs$TABLETS_PER_DAY<-ifelse(subs$THEN>0 & (duplicated(subs$PatientID)&duplicated(subs$EntryDate)&duplicated(subs$TYPE)),as.numeric(as.character(subs$NUM2)),subs$TABLETS_PER_DAY)

 subs$CodeValue<-ifelse((subs$THEN>=1 &duplicated(subs$PatientID)&duplicated(subs$EntryDate)&duplicated(subs$TYPE)),
 as.numeric(subs$CodeValue)-(as.numeric(as.character(subs$TABLETS_PER_DAY))*as.numeric(subs$DAYS)),subs$CodeValue)

#For the second entry, recalculate the prescription minus what was used up whilst on the original dosage
subs$CodeValue<-ifelse(subs$THEN>=1 & !(duplicated(subs$PatientID)&duplicated(subs$EventDate)&duplicated(subs$DRUG_TYPE)),subs$TABLETS_PER_DAY*subs$DAYS,subs$CodeValue)
#For the first entry, remove the unecessary tables

subs$EntryDate<-ifelse(subs$THEN>=1 & (duplicated(subs$PatientID)&duplicated(subs$EntryDate)&duplicated(subs$DRUG_TYPE)),subs$EntryDate+
subs$DAYS,subs$EntryDate)

############################################################################
#ASSIGN DATE OF END OF PRESCRIPTION
m<-(as.numeric(subs$CodeValue)/as.numeric(subs$TABLETS_PER_DAY))
subs$END_DATE<-ifelse(!is.na(subs$TABLETS_PER_DAY)&!is.na(subs$CodeValue),subs$EntryDate+(as.numeric(subs$CodeValue)/as.numeric(subs$TABLETS_PER_DAY)),NA)
subs$END_DATE<-as.Date(as.character(subs$END_DATE),format="%Y%m%d")
subs$END_Date<-as.Date(subs$END_DATE,origin="1968-09-07")

####################################################################################CHECKED

#####################################################################STOP INSTRUCTIONS
table(subs$ALT_OTHER_MEDS) #USING DUNJA'S SMOKING CODE HERE


alts<-subs[subs$ALT_OTHER_MEDS=="Replace"|subs$ALT_OTHER_MEDS=="Stop",c("PatientID","EntryDate","REP","REP2")]
indx1 <-neardate(subs$PatientID, first$PatientID, crea.rep$event.date,first$event.date2,best="after")

#####################################################################

#The main algorithm requires a tab separated input file containing the following fields (names can differ):
#Patient id
#Drug type
#Date
#Tablets (number of tablets prescribed)
#Tablets per day
#Dose (mg)
#Drug family


names(subs)
subs<-subs[,c(1:7,18:20)]

#CONVERT VOLUME DOSAGES FOR LIQUID MEDS. OMIT WATER TO AVOID PICKING UP SOLID DOSE MEDS INSTRUCTED TO BE DISSOLVED IN WATER.
subs$CodeValue<-ifelse(grepl("ml",subs$CodeValue)$!(grep("water",subs$CodeValue)),as.numeric(subs$CodeValue/5),as.numeric(subs$CodeValue))





write.table(subs,file="perl_input.txt",row.names=FALSE,sep="\t")
per<-read.table("perl_input.txt",header=TRUE)
head(per)
 per$DAILY_DOSE<-ifelse(per$LIQUID==1,per$DAILY_DOSE*5,per*DAILY_DOSE)
per$TABLETS_PER_DAY<-as.character(per$TABLETS_PER_DAY)
 per$TABLETS_PER_DAY<-as.numeric(per$TABLETS_PER_DAY)
per$TABLETS_PER_DAY<-ifelse(!is.na(per$LIQUID),(per$TABLETS_PER_DAY*5),per$TABLETS_PER_DAY)
per$DOSE<-ifelse(per$LIQUID>=1,per$DOSE/5,per*DOSE)
 per$TABLETS_PER_DAY<-ifelse(is.na(per$TABLETS_PER_DAY)&!is.na(per$DOSE)&!is.na(per$DAILY_DOSE),(per$DAILY_DOSE/per$DOSE),per$TABLETS_PER_DAY)
 per$TABLETS_PER_DAY<-ifelse(is.na(per$TABLETS_PER_DAY),1,per$TABLETS_PER_DAY)

write.table(per,file="perl_input3011.txt",row.names=FALSE,sep="\t")

