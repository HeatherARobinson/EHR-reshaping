setwd("c:/Users/mqbpjhr4/Documents")
Patients<-read.table("Patients.csv",header=TRUE, sep=",")
tests<-read.table("tests.csv",header=TRUE,sep= ",")
SIR<- merge(Patients,tests,all=TRUE, by='PatID')
require(lubridate) 
SIR$Age<-(as.numeric(year(strptime(SIR$EntryDate, format="%d/%m/%Y"))))-SIR$Year_Of_Birth
attach(SIR)
Over<-subset(SIR,SIR$Age>15 & as.numeric(year(strptime(SIR$EntryDate, format="%d/%m/%Y")))>=2009,)
Over$location<- ifelse(Over$Source=="salfordt", c("Hospital"),("GP"))
attach(Over)
levels(ReadCode)
#Group redundant read codes/rubrics
levels(Over$ReadCode)[1:23] <- "dialysisorckd"
levels(Over$ReadCode)[3:6] <- "eGFR"
levels(Over$ReadCode)[4:7] <- "transplant"
levels(Over$ReadCode)[2] <- "creatinine"
levels(Over$ReadCode)[5:13] <- "dialysisorckd"
table(Over$ReadCode)
attach(Over)
#Drop all records entered after commencement of dialysis/transplant
Over$endpoint<-with(Over, ifelse(ReadCode=="dialysisorckd",paste(EntryDate), "NA"))
Over$endpoint<-with(Over, ifelse(ReadCode=="transplant",paste(EntryDate), paste(endpoint)))
table(Over$EntryDate)
date_diff <- ifelse(!is.na(Over$endpoint), 
(as.Date
(as.character(Over$endpoint), format="%Y/%m/%d")-as.Date(as.character(Over$EntryDate), format="%d/%m/%Y")
), print("NA"))
drops<-Over[which(Over$date_diff <0), ]
Over<-Over[!drops,]


#This gives you ‘data’, a subset of records for patients before CKD, transplant or dialysis

#Check which units have been used to measure Creatinine and convert #from mg/dL to umol/L if needed
levels(Over$Units)
levels(Over$Units)[15]<-"umolOL"
levels(Over$Units)[18:27]<-“mLmin173m2”
table(Over$ReadCode,Over$Units)
Over$stcreat<- ifelse(Over$Units=="umolOL"| Over$Units=="None",Over$Value,(Over$Value/1000)) 
Over$stcreat<- ifelse(Over$ReadCode=="creatinine",paste(Over$stcreat), paste("NA")) 

levels(Over$Units)[1]<-"mLmin173m2"
levels(Over$Units)[14]<-"mLmin173m2"
levels(Over$Units)[17:26]<-"mLmin173m2"
levels(Over$Units)[18]<-"mLmin173m2"
levels(Over$Units)[19:20]<-"mLmin173m2"
levels(Over$Units)[19:20]<-"mLmin173m2"
levels(Over$Units)[15]<-"mLmin173m2"
levels(Over$Units)[17]<-"mLmin173m2"
Over$mdrd<- ifelse(Over$Units=="mLmin173m2",paste(Over$Value),paste(Over$value/1440)) 
Over$mdrd<- ifelse(Over$ReadCode=="eGFR",paste(Over$mdrd), paste("NA"))
class(EntryDate)
Over$EntryDate<-as.Date(Over$EntryDate, format="%d/%m/%Y")
MONTH<- format(Over$EntryDate, "%m")
YEAR<- format(Over$EntryDate, "%Y")
Over$EntryPeriod<-paste(MONTH,YEAR)
#Delete duplicate test results
library(lubridate)
which(Over[!(duplicated(Over$stcreat)&duplicated(Over$PatID)&Over$mdrd=="NA"&duplicated(Over$EntryPeriod)),])

d<-Over[!(duplicated(Over$Value)&duplicated(Over$PatID)&duplicated(Over$EntryPeriod)),]
df<-subset(d,d$Sex=="F"&d$ReadCode=="creatinine",)

#Write an input file for STATA with headings complementary Aberdeen algorithm 
SIRinput<-file(paste("SIR_Rinput.csv"), open="w")
cat("studyid","dos","stcreat","mdrd","location_code","age","sex","\n", sep=",",file="SIR_Rinput.csv",append=TRUE)
for (n in 1:205667){ #Change loop number to number of records in dataset
cat((paste(d2$PatID[n])),(paste(d2$EntryDate[n])), (paste(d2$stcreat[n])),(paste(d2$mdrd[n])), (paste(d2$Source[n])),(paste(d2$Age[n])), (paste(d2$Sex[n])), "\n", file="SIR_Rinput.csv", sep=",", fill=FALSE, labels=NULL, append=TRUE)}
