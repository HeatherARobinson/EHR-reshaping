ssh mqbpjhr4@incline256.itservices.manchester.ac.uk
module load apps/gcc/R/3.3.3
R

load("crea.rep161117.rda")
load("sir.datahfonly.Rdata")

library (taRifx)
library (dplyr)
library(tcltk)
library(lubridate)
require(dplyr)

##################################################################################
#BASED ON THE NHS UK AKI ALGORITHM, OMITTING INDICATORS FROM URINE ALBUMIN
###################################################################################

#SELECT ELIGIBLE PATIENTS
attach(crea.rep)
CKs<-crea.rep[crea.rep$CKD==0,]
sir.data$event.date<-as.Date(as.character(sir.data$EntryDate),format="%Y%m%d")
a<-sir.data[sir.data$ReadCode=="44J3."&sir.data$PatientID %in% CKs$PatientID,]
#The dataset is cleaned again at the end to make sure that CKD patients are not classed as having an AKI
na.omit(a)
a<-a[!is.na(a$PatientID),]
attach(a)
index<-which(event.date>=as.Date(ymd("2007-01-01")))
#The index start date should be 1 year prior to the first recorded creatinine test of the study window
a<-a[index,]
length(a$PatientID) #9723 potentially qualifying tests
levels(a$Ethnicity)[c(2:4,11)]<-4
levels(a$Ethnicity)[c(4)]<-4
a$Creatinine<-as.numeric(a$CodeValue)
#CALCULATING MDRD eGFR
o<-ifelse(a$Ethnicity=="4",1.212,1)
o<-ifelse((is.na(a$Ethnicity)|a$Ethnicity==""),1,o)
p<-ifelse(a$Gender=="F",0.742,1)
a$Age<-(as.numeric(year(strptime(a$EntryDate, format="%Y%m%d"))))-a$BirthYear
a$MDRDeGFR<-(175*((a$Creatinine/88.42)^-1.154))*(a$Age^-0.203)*o*p

a<-a[,c("PatientID","event.date","Creatinine","Age", "Gender","MDRDeGFR")]
attach(a)
names(a)
########################################################################### CHECKED

#Order creatinine values and find the max per day per patient
destring(c(PatientID,Creatinine,Age,Gender,event.date,MDRDeGFR))
a <- a[order(-Creatinine),] #Creatinine is a summary value- the highest serum creatinine per day
table(duplicated(a[,1:2]))
a2<-a[duplicated(a[,1:2]),] #Remove same day duplicate entries
a<-a[!rownames(a) %in% rownames(a2),]#drop other values
a<-a[!is.na(a$Creatinine),]
length(a$PatientID) #Remaining entries after removing missing values
#7102
########################################################################## CHECKED

require(dplyr)
sorted <- a %>% 
          arrange(PatientID,event.date) %>%
          group_by(PatientID) %>%
          mutate(protagonist=row_number())
a<-data.frame(sorted)
attach(a)

#GIVE EACH TEST AN ORDER NUMBER PER PATIENT SO WE CAN LATER LOOP THROUGH THEM
####################################################################################### CHECKED
# PART 2 - LOOP FOR AKI FLAGS 
#LOOP FORMATION FOR COMPARING EACH TEST WITH PREVIOUS TESTS
#CREATE A MARKER VARIABLE FOR EACH TIME AKI EALERT CRITERIA SATISFIED

newAKI<-0
AKIyear<-0
AKIweek<-0
max(protagonist) #number of loop iterations needed.

#LOOP for x values, where x = the highest number of tests a patient had in the index year (max(protagonist)) 
mightydate<-NA
protagonistdos<-NA
yearmarker<-0
weekmarker<-0
Dmarker<-0


 if(Gender[i]=="M"){    
    ref.low=62
    ref.up=115
    } else {    
    ref.low=44
    ref.up=97}
   
a <-a[order(PatientID, event.date),] 
attach(a)

############################################################################################################# CHECKED
pb<-tkProgressBar(title="Identifying AKI events",min=0,max=max(protagonist),width=300) #indicates progress through the loop
for (i in 1:max(protagonist)) {
setTkProgressBar(pb,i,label=paste(round(i/max(protagonist)*100, 0),"% done"))
mightydate<-as.Date(ifelse(protagonist==protagonist[i],event.date,mightydate),origin="1970-01-01")
protagonistdos<-ave(mightydate,PatientID,FUN=max)
#Apply each test date to all other tests from the same patient to find the time difference

yearmarker[i]<-ifelse(as.Date(protagonistdos[i])-event.date[i]<=365 & (protagonistdos[i]-event.date[i]>90),1,yearmarker)
weekmarker[i]<-ifelse(as.Date(protagonistdos[i])-event.date[i]<=7 & (protagonistdos[i]-event.date)[i]>=0,1,weekmarker) 
Dmarker[i]<-ifelse(as.Date(protagonistdos[i])-event.date[i]<=2 & (protagonistdos[i]-event.date)[i]>=0,1,Dmarker) 

yearvalue[i]<-ifelse(yearmarker[i]>0,Creatinine[i],NA)
weekvalue[i]<-ifelse(weekmarker[i]>0,Creatinine[i],NA)
Dvalue[i]<-ifelse(Dmarker[i]>0,Creatinine[i],NA)

yearmedian<-ave(as.numeric(yearvalue),PatientID,FUN = function(x) median(x, na.rm = TRUE))
weekmin<-ave(as.numeric(weekvalue),PatientID,FUN = function(x) min(x, na.rm = TRUE))
Dmin<-ave(as.numeric(weekvalue),PatientID,FUN = function(x) min(x, na.rm = TRUE))

#applies the optimal reference creatinine (which will later be chosen from yearmedian, weekmin or Dmin) across all patient samples

mightyvalue[i]<-Creatinine[i]
protagonistvalue[i]<-ave(mightyvalue,PatientID,FUN = function(x) max(x, na.rm = TRUE))
#finds the index (investigated) creatinine of key interest, applies this value across all patient samples

D<-ifelse(as.numeric(Dmarker)>0,abs(Creatinine-as.numeric(Dvalue)),NA)
#Finds the 48 hour difference in 2 samples taken within a 48 hour window
}

#END OF LOOP
close(pb)

RV1<-Creatinine/weekmin
RV2<-Creatinine/yearmedian
RV_ratio<-ifelse(RV1>RV2,RV1,RV2) 
######################################################################################################################### CHECKED
#Identify AKI here

AKIyear<-ifelse((Creatinine/yearmedian)>=1.5 & !is.na(yearmedian) & (Creatinine>(3*RV_ratio)|RV_ratio>=1.5),1,0)
AKIweek<-ifelse((Creatinine/weekmin)>=1.5 & !is.na(weekmin) & (Creatinine>(3*RV_ratio)|RV_ratio>=1.5),1,0)
AKIyear<-ifelse(is.na(AKIyear) & !is.na(yearmedian) & RV_ratio<1.5 & D>26,1,AKIyear)
AKIweek<-ifelse(is.na(AKIweek) & !is.na(weekmin) & RV_ratio<1.5 & D>26,1,AKIweek)
newAKI<-ifelse(AKIyear==1|AKIweek==1,1,0)
############################################################################################################################
#DEVELOP COMBINED GROUPS AND MARK FIRST AKI
