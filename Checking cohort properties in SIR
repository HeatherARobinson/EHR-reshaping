load ("sir.data.rda")
memory.size(50000)
#READ CONDITION FILES- SUFFIX ALL NAMES WITH A 1 THEN YOU CAN IMPORT THEM ALL TOGETHER

temp = list.files(pattern="*1.csv")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
heart<-read.csv("HeartFailure.csv")

library(zoo)
library(plyr)
library(tidyverse)
library(zoo)
library(data.table)
library(survival)

#####
#SELECT HEART FAILURE PATIENTS WITH CREATININE DATA
sir.data[sir.data$ReadCode %in% heart$Code,]->hf
dialysis<-sir.data[sir.data$ReadCode %in% Dialysis1.csv$ReadCode,]
crea<-sir.data[!sir.data$PatientID %in% dialysis$PatientID & sir.data$PatientID %in% hf$PatientID,]

as.numeric(as.character(crea$CodeValue)) -> crea$CodeValue
crea$Creatinine<-ifelse(crea$ReadCode=="44J3.",as.numeric(crea$CodeValue),NA) #Any non numeric values are marked NA
crea$EntryDate<-as.Date(as.character(strptime(crea$EntryDate, format="%Y%m%d")))
MONTH<- format(crea$EntryDate, "%m")
YEAR<- format(crea$EntryDate, "%Y")
crea$EntryPeriod<-paste(MONTH,YEAR)
#Delete duplicate test results
library(lubridate)

post2008<-crea[as.numeric(year(strptime(crea$EntryDate, format="%Y%m%d")))>=2008,]
alls<-crea[crea$PatientID %in% post2008$PatientID,]
#Create a date format entry date
DAY<- format(alls$EntryDate, "%d")
MONTH<- format(alls$EntryDate, "%m")
YEAR<- format(alls$EntryDate, "%Y")
as.Date.character(paste(YEAR,MONTH,DAY,sep="-")) -> alls$event.date

#WHICH PATIENTS WHICH HAVE A RECORDED TIME RANGE OF 1 YEAR OR FEWER
aggregate(alls$event.date, list(alls$PatientID), range) -> ranges
ranges$range <- (ranges$x[,2])/365- (ranges$x[,1])/365
ranges[(which(ranges$range <=4)),1] -> range_short_ids  
alls[-which(alls$PatientID %in% range_short_ids),] -> allsp 
levels(as.factor(allsp$PatientID))












sir.data[sir.data$ReadCode=="44J3.",]->crea 
#REMOVE DIALYSIS PATIENTS
dialysis<-sir.data[sir.data$ReadCode %in% Dialysis1.csv$ReadCode,]
crea<-crea[!crea$PatientID %in% dialysis$PatientID & crea$PatientID %in% hf$PatientID,]

as.numeric(as.character(crea$CodeValue)) -> crea$CodeValue
crea$Creatinine<-ifelse(crea$ReadCode=="44J3.",as.numeric(crea$CodeValue),NA) #Any non numeric values are marked NA
crea$EntryDate<-as.Date(as.character(strptime(crea$EntryDate, format="%Y%m%d")))
MONTH<- format(crea$EntryDate, "%m")
YEAR<- format(crea$EntryDate, "%Y")
Over$EntryPeriod<-paste(MONTH,YEAR)
#Delete duplicate test results
library(lubridate)
d<-crea[(duplicated(crea$Creatinine)&duplicated(crea$PatientID)&duplicated(crea$EntryPeriod)),]
crea[-d,] -> crea 
crea[-which(crea$CodeValue<18),] -> crea # creatinine values less than 18 considered not valid
crea$Creatinine<-crea$CodeValue

post2008<-crea[as.numeric(year(strptime(crea$EntryDate, format="%Y%m%d")))>=2008,]
alls<-crea[crea$PatientID %in% post2008$PatientID,]
#Create a date format entry date
substr(alls$EntryDate,1,4) -> year
substr(alls$EntryDate,5,6) -> month
substr(alls$EntryDate,7,8) -> day
as.Date.character(paste(year,month,day,sep="-")) -> alls$event.date

#WHICH PATIENTS WHICH HAVE A RECORDED TIME RANGE OF 1 YEAR OR FEWER
aggregate(alls$event.date, list(alls$PatientID), range) -> ranges
ranges$range <- (ranges$x[,2])/365- (ranges$x[,1])/365
ranges[(which(ranges$range <=4)),1] -> range_short_ids  
alls[-which(alls$PatientID %in% range_short_ids),] -> allsp 
levels(as.factor(allsp$PatientID))



#FILTER PATIENTS WHICH HAVE A RECORDED TIME RANGE FEWER THAN 7 YEARS
aggregate(post2008$event.date, list(post2008$PatientID), range) -> ranges
ranges$range <- (ranges$x[,2])/365- (ranges$x[,1])/365
ranges[(which(ranges$range >=7)),1] -> range_short_ids  
post2008[which(post2008$PatientID %in% range_short_ids), ] -> post2008
levels(as.factor(post2008$PatientID))



sir.data<-sir.data[which(sir.data$PatientID %in% crea.rep$PatientID),]
