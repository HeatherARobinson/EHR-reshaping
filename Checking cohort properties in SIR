load ("sir.data.rda")
memory.size(50000)
#READ CONDITION FILES- SUFFIX ALL NAMES WITH A 1 THEN YOU CAN IMPORT THEM ALL TOGETHER

temp = list.files(pattern="*1.csv")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
heart<-read.csv("HeartFailure.csv")

library(zoo)
library(plyr)
library(tidyverse)
library(zoo)
library(data.table)
library(survival)

#####
#SELECT HEART FAILURE PATIENTS WITH CREATININE DATA
sir.data[sir.data$ReadCode %in% heart$Code,]->hf
dialysis<-sir.data[sir.data$ReadCode %in% Dialysis1.csv$ReadCode,]
post2008<-sir.data[as.numeric(year(strptime(sir.data$EntryDate, format="%Y%m%d")))>=2008,]
crea<-sir.data[!sir.data$PatientID %in% dialysis$PatientID & sir.data$PatientID %in% hf$PatientID& sir.data$PatientID %in% post2008$PatientID,]
as.numeric(as.character(crea$CodeValue)) -> crea$CodeValue
crea$EntryDate<-as.Date(as.character(strptime(crea$EntryDate, format="%Y%m%d")))

#Create a date format entry date
DAY<- format(crea$EntryDate, "%d")
MONTH<- format(crea$EntryDate, "%m")
YEAR<- format(crea$EntryDate, "%Y")
as.Date.character(paste(YEAR,MONTH,DAY,sep="-")) -> crea$event.date

#WHICH PATIENTS WHICH HAVE A RECORDED TIME RANGE OF 4 YEARs OR MORE
aggregate(crea$event.date, list(crea$PatientID), range) -> ranges
ranges$range <- (ranges$x[,2])/365- (ranges$x[,1])/365
ranges[(which(ranges$range <=4)),1] -> range_short_ids  
crea[-which(crea$PatientID %in% range_short_ids),] -> allsp 
levels(as.factor(allsp$PatientID))

#WHICH PATIENTS HAVE A POST 2008 TIME RANGE OF 4 YEARs OR MORE
aggregate(crea$event.date, list(crea$PatientID), range) -> ranges
ranges$range <- (ranges$x[,2])/365- (ranges$x[,1])/365
ranges[(which(ranges$range <=4)),1] -> range_short_ids  
crea[-which(crea$PatientID %in% range_short_ids),] -> allsp 
levels(as.factor(allsp$PatientID))

crea<-sir.data[!sir.data$PatientID %in% dialysis$PatientID & sir.data$PatientID %in% hf$PatientID& sir.data$PatientID %in% post2008$PatientID,]
crea<-crea[as.numeric(year(strptime(crea$EntryDate, format="%Y%m%d")))>=2008 & crea$ReadCode=="44J3.",]

#REMOVE DUPLICATES
as.numeric(as.character(crea$CodeValue)) -> crea$CodeValue
crea$Creatinine<-ifelse(crea$ReadCode=="44J3.",as.numeric(crea$CodeValue),NA) #Any non numeric values are marked NA
crea$EntryDate<-as.Date(as.character(strptime(crea$EntryDate, format="%Y%m%d")))
MONTH<- format(crea$EntryDate, "%m")
YEAR<- format(crea$EntryDate, "%Y")
Over$EntryPeriod<-paste(MONTH,YEAR)
#Delete duplicate test results
library(lubridate)
d<-crea[(duplicated(crea$Creatinine)&duplicated(crea$PatientID)&duplicated(crea$EntryPeriod)),]
crea[-d,] -> crea 
crea[-which(crea$CodeValue<18),] -> crea # creatinine values less than 18 considered not valid
crea$Creatinine<-crea$CodeValue

table(crea$PatientID) ==1 -> rare  
rownames(as.matrix(rare)) -> ids
table(rare)
crea[!(crea$PatientID %in% ids[rare]),] -> crea.rep	

#WHICH PATIENTS WHICH HAVE A RECORDED TIME RANGE OF 1 YEAR OR FEWER
aggregate(alls$EntryDate, list(alls$PatientID), range) -> ranges
ranges$range <- (ranges$x[,2])/365- (ranges$x[,1])/365
ranges[(which(ranges$range <1)),1] -> range_short_ids  
alls[which(alls$PatientID %in% range_short_ids),] -> allsp 
levels(as.factor(allsp$PatientID))


