load("crea.repongoing.rda")
load("sir.datahfonly.Rdata")

library (taRifx)
library (dplyr)
library(tcltk)
library(lubridate)

###########################################################
#MDRD eGFR
o<-ifelse(crea.rep$Ethnicity==4,1.212,1)
p<-ifelse(crea.rep$Gender=="F",0.742,1)
crea.rep$MDRDeGFR<-(175*((crea.rep$Creatinine/88.42)^-1.154))*(crea.rep$Age^-0.203)*o*p
##################################################################################
#List creatinine tests, marking those of CKD patients
crea.rep$KDmark<-ifelse(!is.na(crea.rep$MDRDeGFR)&crea.rep$MDRDeGFR<60,1,0)
#Tests marked with a 1 for KDmark are qualifying tests

##############################################################################################
#Check for and exclude CKD patients
tabulate the first qualifying test for each patient
CKs<-crea.rep[crea.rep$KDmark==1,c("PatientID","EntryDate","KDmark")]
CKs$EntryDate<-as.Date(as.character(CKs$EntryDate),format="%Y%m%d")
CKs$EntryDate2<-CKs$EntryDate-90
crea.rep$event.date<-as.Date(as.character(crea.rep$event.date),format="%Y/%m/%d")

for (i in 1:length(CKs$PatientID)){
CKs$x[i]<-ifelse(length(crea.rep$PatientID[crea.rep$PatientID==CKs$PatientID[i] &crea.rep$event.date>CKs$EntryDate[i] & crea.rep$event.date<CKs$EntryDate2[i]&crea.rep$CKDmark==0])>0,1,0)
}

CKs<-CKs[CKs$x==0,c(1:2,5)] #CKD qualifying tests-with another qualifying test at least 3 months prior and no normal tests in between
names(CKs)<-c("PatientID","EntryDate","CKDStage")
CKs$CKDStage<-1
CKs$EntryDate<-as.character(CKs$EntryDate)
CKs$EntryDate<-gsub("-","",CKs$EntryDate) 

length(CKs$PatientID)#48518
crea.rep<-merge(crea.rep,CKs,all.x=TRUE)

#ASSIGN CKD STAGES
crea.rep$CKDStage<-ifelse(!is.na(crea.rep$CKDStage)&crea.rep$MDRDeGFR>=60&crea.rep$MDRDeGFR<=89,2,crea.rep$CKDStage)
crea.rep$CKDStage<-ifelse(!is.na(crea.rep$CKDStage)&crea.rep$MDRDeGFR>=30&crea.rep$MDRDeGFR<=59,3,crea.rep$CKDStage)
crea.rep$CKDStage<-ifelse(!is.na(crea.rep$CKDStage)&crea.rep$MDRDeGFR>=15&crea.rep$MDRDeGFR<=29,4,crea.rep$CKDStage)
crea.rep$CKDStage<-ifelse(!is.na(crea.rep$CKDStage)&crea.rep$MDRDeGFR<15,5,crea.rep$CKDStage)

###################################################################################
#NHS UKI AKI ALGORITHM
#Mark AKI qualifying tests
attach(crea.rep)
crea.rep$event.date<-as.Date(as.character(crea.rep$EntryDate),format="%Y%m%d")
sir.data$event.date<-as.Date(as.character(sir.data$EntryDate),format="%Y%m%d")
ethnic.data<-read.table("ethnic.data.csv",header=TRUE,sep=",")
ethnic.data$Category<-floor(ethnic.data$Category)
sir.data<-merge(sir.data,ethnic.data,by.x="Ethnicity",by.y="ClinCode2",all.x=TRUE, all.y=FALSE)
colnames(sir.data)[which(names(sir.data) == "Category")] <- "Ethnicity"
sir.data$Age<-sir.data$hfage
o<-ifelse(sir.data$Ethnicity==4,1.212,1)
p<-ifelse(sir.data$Gender=="F",0.742,1)


d1<-crea.rep[,c("PatientID","event.date","Creatinine","Age", "Gender","MDRDeGFR")]
d2<-sir.data[sir.data$ReadCode=="44J3."&sir.data$PatientID %in% crea.rep$PatientID & as.numeric(sir.data$EntryDate)>=20070101,]
d2$Creatinine<-as.numeric(d2$CodeValue)
d2$Age<-(as.numeric(year(strptime(d2$EntryDate, format="%Y%m%d"))))-d2$BirthYear
d2$MDRDeGFR<-(175*((d2$Creatinine/88.42)^-1.154))*(d2$Age^-0.203)*o*p
d2<-d2[,c("PatientID","event.date","Creatinine","Age", "Gender","MDRDeGFR")]
a<-rbind(d1,d2)

#Order creatinine values and find the max per day per patient
destring(c(PatientID,Creatinine,Age,Gender,event.date,MDRDeGFR))
a <- a[order(-Creatinine),] #The highest stcreat per day will be retained
table(duplicated(a[,1:2]))
a2<-a[duplicated(a[,1:2]),]
a<-a[!rownames(a) %in% rownames(a2),]#drop other values
length(a$PatientID) #Number of records following duplicate removal #202641
#a<-a[!is.na(a$stcreat),]
#a<-a[!a$mdrd>250,]
#length(a$PatientID) #Remaining entries after removing missing and impossible values
a$KImark<-ifelse(a$MDRDeGFR<60,1,0)
attach(a)

#DEFINE POPULATION LEVEL REF. VALUE
ref.up=ref.low=NULL
  if(Gender=="M"){
    
    ref.low=62
    ref.up=115
    
  } else {
    
    ref.low=44
    ref.up=97


#ADD AN INDEX NUMBER FOR EACH TEST
require(dplyr)
sorted <- a %>% 
          arrange(PatientID,event.date) %>%
          group_by(PatientID) %>%
          mutate(testno=row_number())
a<-data.frame(sorted)
attach(a)
summary(testno)

newAKI<-0
AKImonth<-0
AKIyear<-0
AKIweek<-0
AKIday<-0
max(testno) #number of loop iterations needed.


#Check if data available within 365 days prior,7 days or 2 days
#LOOP for x values, where x = the highest number of tests a patient had in the index year (max(protagonist)) 
overdate<-NA
testnodate<-NA
yearmarker<-NA
#monthmarker<-NA
weekmarker<-NA
#daymarker<-NA
a <-a[order(PatientID,event.date),] 
attach(a)

#for each index (investigated) creatinine of key interest:
#Find the most recent prior test and note the date (testnodate) and value (testnovalue). 

pb<-tkProgressBar(title="Processing creatinine values",min=0,max=max(testno),width=300) 
for (i in 1:max(testno)) {
setTkProgressBar(pb,i,label=paste(round(i/(max(testno))*100, 0),"% done"))
overdate<-ifelse(testno==i,event.date[i],overdate)
testnodate<-(ave(overdate,PatientID,FUN=max))
yearmarker<-ifelse((testnodate-as.numeric(event.date))<=365 & (testnodate-as.numeric(event.date))>90,1,yearmarker)
weekmarker<-ifelse((testnodate-as.numeric(event.date))<=7 & !testnodate==as.numeric(event.date),1,weekmarker)
overvalue[i]<-ifelse(testno==i,Creatinine[i],NA)
testnovalue<-ave(overvalue[!is.na(overvalue)],PatientID,FUN=max) 
}
#END OF LOOP
close(pb)

a$overdate<-overdate
a$testnovalue<-testnovalue
head(a,n=30)

#IF YEARLY LOOKBACK, TAKE MEDIAN OF RESULTS=RV2
sorted2 <- a %>% 
          arrange(PatientID,event.date) %>%
          group_by(PatientID) %>%
          mutate(RV2=median(testnovalue[yearmarker==1]))
sorted2<-data.frame(sorted2)


attach(a)

#IF WEEKLY LOOKBACK, TAKE LOWEST VALUE=RV1





#IS INDEX CREATININE(C1)/RV1 OR RV2 >=1.5?
RV_ratio<-ifelse(!is.na(RV1),C1/RV1>=1.5,C1/RV2>=1.5)

#IF NO...
AKI_Stage<-ifelse(RV_Ratio<1.5&D>26&2day==1,1,AKI_Stage)

#IF YES...

AKI_Stage<-ifelse(RV_Ratio>=1.5&C1>(3*ULRI),3,AKI_Stage)
AKI_Stage<-ifelse(RV_Ratio>=3&C1<=(3*ULRI),3,AKI_Stage)
AKI_Stage<-ifelse(RV_Ratio>=2&RV_Ratio<3&C1<=(3*ULRI),2,AKI_Stage)
AKI_Stage<-ifelse(RV_Ratio>=1.5&RV_Ratio<2&C1<=(3*ULRI),1,AKI_Stage)



CKD$AKI<-NA



#crea.rep$AKI

###################################################################################
#crea.rep$RateRenChange #Rate of renal change
###################################################################################
#crea.rep$AKIepisodes<- #no. past AKI episodes?
###################################################################################
#crea.rep$WorsRenFail<- Worsening renal failure
